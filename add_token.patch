Subject: [PATCH] add token
---
Index: src/main/java/telran/project/gardenshop/configuration/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/telran/project/gardenshop/configuration/SecurityConfig.java b/src/main/java/telran/project/gardenshop/configuration/SecurityConfig.java
--- a/src/main/java/telran/project/gardenshop/configuration/SecurityConfig.java	(revision 956c71f2429bc3cce1ed9490f4935f5edb18fada)
+++ b/src/main/java/telran/project/gardenshop/configuration/SecurityConfig.java	(date 1753950270366)
@@ -1,19 +1,31 @@
 package telran.project.gardenshop.configuration;
 
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.security.authentication.AuthenticationManager;
 import org.springframework.security.config.Customizer;
+import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.http.SessionCreationPolicy;
+import org.springframework.security.core.userdetails.UserDetailsService;
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+import telran.project.gardenshop.service.security.JwtFilter;
 
 @Configuration
 @EnableWebSecurity
 public class SecurityConfig {
 
+    @Autowired
+    private JwtFilter jwtFilter;
+
+    @Autowired
+    private UserDetailsService userDetailsService;
+
     @Bean
     public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
         http
@@ -29,9 +41,11 @@
                         .requestMatchers("/api/categories").authenticated()
                         .requestMatchers("/v1/orders/**").hasRole("USER")
                         .anyRequest().permitAll())
-                .httpBasic(Customizer.withDefaults())
+              //  .httpBasic()
                 .sessionManagement(session ->
-                        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
+                        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
+                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);
+
         return http.build();
     }
 
@@ -39,4 +53,9 @@
     public PasswordEncoder passwordEncoder() {
         return new BCryptPasswordEncoder();
     }
+
+    @Bean
+    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
+        return configuration.getAuthenticationManager();
+    }
 }
\ No newline at end of file
Index: src/main/java/telran/project/gardenshop/service/security/JwtFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/telran/project/gardenshop/service/security/JwtFilter.java b/src/main/java/telran/project/gardenshop/service/security/JwtFilter.java
new file mode 100644
--- /dev/null	(date 1753950921055)
+++ b/src/main/java/telran/project/gardenshop/service/security/JwtFilter.java	(date 1753950921055)
@@ -0,0 +1,59 @@
+package telran.project.gardenshop.service.security;
+
+import io.jsonwebtoken.ExpiredJwtException;
+import jakarta.servlet.FilterChain;
+import jakarta.servlet.ServletException;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.stereotype.Service;
+import org.springframework.web.filter.OncePerRequestFilter;
+
+import java.io.IOException;
+import java.util.Enumeration;
+
+@Service
+public class JwtFilter extends OncePerRequestFilter {
+
+    @Autowired
+    private JwtService jwtService;
+
+    @Autowired
+    private UserDetailsService userDetailsService;
+
+    @Override
+    protected void doFilterInternal(HttpServletRequest request,
+                                    HttpServletResponse response,
+                                    FilterChain filterChain) throws ServletException, IOException {
+
+        String authorization = request.getHeader("Authorization");
+        if (authorization == null || !authorization.startsWith("Bearer ")) {
+            filterChain.doFilter(request, response);
+            return;
+        }
+
+        String jwt = authorization.substring("Bearer ".length());
+        // 1 - username , 2 - check in database
+        String username = null;
+        try {
+            username = jwtService.extractUserName(jwt);
+        } catch (ExpiredJwtException expiredJwtException) {
+            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, expiredJwtException.getMessage());
+            filterChain.doFilter(request, response);
+        }
+
+        if (username != null && jwtService.isValidToken(jwt)) {
+            UserDetails user = userDetailsService.loadUserByUsername(username);
+            UsernamePasswordAuthenticationToken authenticationToken =
+                    new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
+
+            SecurityContextHolder.getContext().setAuthentication(authenticationToken);
+        }
+
+        filterChain.doFilter(request, response);
+    }
+}
\ No newline at end of file
Index: src/main/resources/application-dev.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application-dev.properties b/src/main/resources/application-dev.properties
--- a/src/main/resources/application-dev.properties	(revision 956c71f2429bc3cce1ed9490f4935f5edb18fada)
+++ b/src/main/resources/application-dev.properties	(date 1753870091056)
@@ -1,18 +1,18 @@
 # --- Server Settings ---
-#server.port=8082
-#spring.application.name=gardenShop
+server.port=8082
+spring.application.name=gardenShop
 
-#spring.datasource.url=jdbc:mysql://localhost:3306/gardenshop
-#spring.datasource.username=root
-#spring.datasource.password=rootroot
+spring.datasource.url=jdbc:mysql://localhost:3306/gardenshop
+spring.datasource.username=root
+spring.datasource.password=rootroot
 
 # --- Hibernate ---
-#spring.jpa.hibernate.ddl-auto=none
-#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
+spring.jpa.hibernate.ddl-auto=none
+spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
 
 # --- Liquibase ---
-#spring.liquibase.enabled=true
-#spring.liquibase.change-log=classpath:/db/db.changelog-master.xml
+spring.liquibase.enabled=true
+spring.liquibase.change-log=classpath:/db/db.changelog-master.xml
 
 # --- SQL init disabled ---
-#spring.sql.init.mode=never
\ No newline at end of file
+spring.sql.init.mode=never
\ No newline at end of file
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 956c71f2429bc3cce1ed9490f4935f5edb18fada)
+++ b/src/main/resources/application.properties	(date 1753950921032)
@@ -18,4 +18,6 @@
 
 # --- SQL init disabled ---
 spring.sql.init.mode=never
-#logging.level.root =debug
\ No newline at end of file
+#logging.level.root =debug
+
+jwt.signing.key=aWdqdm1pamlnamRmaWdqdmRmbGtnanZzbG1rZmRnam1zaWRmbGdqdmllcnRqc2VyanN0bThlcnRtZXI4Y2dqcjhqcmU4ZmplOG1qc2lmanNrbGZqbXNka2ZqcmpjZm1qdGptNDk4dHU1OHRqY204amVyamdldW1yZ21qY2VzY29la3JvY21lcnRvcmVrdDljaWVydDk4Y3U0ZXQ4dTg1dXQ4NXVjdHJudGpvZW1ydC4gICAgIHdyb2llcmlqcnRqcnQ4aHI3dGhyZ2hzODl0dTk0dDQzd3UzNHVxZXVmaXNqZmdzbGRpamtsbmd1c2hndWloZGY3OGU5ODd5dDg0OXV0MDk0ajl3amZlaWdqd2lvZ2ppd2hnOThlbjk4Z2g5OHdlaGc5OGVyaDg5ZWg4cmhnaXVlcmhnaW1laHJnb2Vyajk4Z2owOTRldTAzOTR0NDN0MzR0NDN0ZXJna25mbGRrbmdrbGZnbmRmbGdk
\ No newline at end of file
Index: src/main/java/telran/project/gardenshop/service/security/JwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/telran/project/gardenshop/service/security/JwtService.java b/src/main/java/telran/project/gardenshop/service/security/JwtService.java
new file mode 100644
--- /dev/null	(date 1753950921051)
+++ b/src/main/java/telran/project/gardenshop/service/security/JwtService.java	(date 1753950921051)
@@ -0,0 +1,90 @@
+package telran.project.gardenshop.service.security;
+
+import io.jsonwebtoken.Claims;
+import io.jsonwebtoken.Jwts;
+import io.jsonwebtoken.io.Decoders;
+import io.jsonwebtoken.security.Keys;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.stereotype.Service;
+
+import javax.crypto.SecretKey;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.Function;
+
+@Service
+public class JwtService {
+
+    // jwt - string 1.2.3
+
+    @Value("${jwt.signing.key}")
+    private String jwtSecret;
+
+    /*
+    {
+  "sub": "anna.updated@garden.ru",
+  "iat": 1753870544,
+  "exp": 1753874144,
+  "roles": [
+    {
+      "authority": "USER"
+    }
+  ],
+  "login": "anna.updated@garden.ru"
+}
+
+
+     */
+
+    public String generateToken(UserDetails user) {
+        Map<String, Object> claims = new HashMap<>();
+        claims.put("login", user.getUsername());
+        claims.put("roles", user.getAuthorities());
+
+        return generateToken(user, claims);
+    }
+
+    private String generateToken(UserDetails user, Map<String, Object> claims) {
+        return Jwts.builder()
+                .claims()
+                .subject(user.getUsername())
+                .issuedAt(new Date())
+                .expiration(new Date(System.currentTimeMillis() + 10000))
+                .add(claims)
+                .and()
+                .signWith(getJwtSecret())
+                .compact();
+    }
+
+    private SecretKey getJwtSecret() {
+        byte[] decode = Decoders.BASE64.decode(jwtSecret);
+        return Keys.hmacShaKeyFor(decode);
+    }
+
+    public String extractUserName(String jwt) {
+        return extractClaim(jwt, Claims::getSubject);
+    }
+
+    public Date extractExpiration(String jwt) {
+        return extractClaim(jwt, Claims::getExpiration);
+    }
+
+    public boolean isValidToken(String token) {
+        return new Date().before(extractExpiration(token));
+    }
+
+    private <T> T extractClaim(String jwt, Function<Claims, T> claimsResolver) {
+        Claims claims = extractClaims(jwt);
+        return claimsResolver.apply(claims);
+    }
+
+    private Claims extractClaims(String jwt) {
+        return Jwts.parser()
+                .setSigningKey(getJwtSecret())
+                .build()
+                .parseSignedClaims(jwt).getPayload();
+    }
+
+}
\ No newline at end of file
Index: src/main/java/telran/project/gardenshop/service/security/AuthenticationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/telran/project/gardenshop/service/security/AuthenticationService.java b/src/main/java/telran/project/gardenshop/service/security/AuthenticationService.java
new file mode 100644
--- /dev/null	(date 1753950921046)
+++ b/src/main/java/telran/project/gardenshop/service/security/AuthenticationService.java	(date 1753950921046)
@@ -0,0 +1,9 @@
+package telran.project.gardenshop.service.security;
+
+import telran.project.gardenshop.dto.security.AuthRequest;
+import telran.project.gardenshop.dto.security.AuthResponse;
+
+public interface AuthenticationService {
+
+    AuthResponse authenticate(AuthRequest authRequest);
+}
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 956c71f2429bc3cce1ed9490f4935f5edb18fada)
+++ b/pom.xml	(date 1753950921041)
@@ -125,6 +125,24 @@
             <scope>test</scope>
         </dependency>
 
+        <dependency>
+            <groupId>io.jsonwebtoken</groupId>
+            <artifactId>jjwt-impl</artifactId>
+            <version>0.12.5</version>
+        </dependency>
+
+        <dependency>
+            <groupId>io.jsonwebtoken</groupId>
+            <artifactId>jjwt-api</artifactId>
+            <version>0.12.5</version>
+        </dependency>
+
+        <dependency>
+            <groupId>io.jsonwebtoken</groupId>
+            <artifactId>jjwt-jackson</artifactId>
+            <version>0.12.5</version>
+        </dependency>
+
     </dependencies>
 
     <build>
Index: src/main/java/telran/project/gardenshop/service/security/AuthenticationServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/telran/project/gardenshop/service/security/AuthenticationServiceImpl.java b/src/main/java/telran/project/gardenshop/service/security/AuthenticationServiceImpl.java
new file mode 100644
--- /dev/null	(date 1753950921019)
+++ b/src/main/java/telran/project/gardenshop/service/security/AuthenticationServiceImpl.java	(date 1753950921019)
@@ -0,0 +1,37 @@
+package telran.project.gardenshop.service.security;
+
+import lombok.RequiredArgsConstructor;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.stereotype.Service;
+import telran.project.gardenshop.dto.security.AuthRequest;
+import telran.project.gardenshop.dto.security.AuthResponse;
+
+@Service
+@RequiredArgsConstructor
+public class AuthenticationServiceImpl implements AuthenticationService {
+
+
+    private final AuthenticationManager authenticationManager;
+
+    private final UserDetailsService userDetailsService;
+
+    private final JwtService jwtService;
+
+    @Override
+    public AuthResponse authenticate(AuthRequest authRequest) {
+        //Нужно сделать проверку , аналогичную вызову метода
+        //loadUserByUsername - UserDetailsService
+        authenticationManager
+                .authenticate(
+                        new UsernamePasswordAuthenticationToken(authRequest.email(),
+                                authRequest.password()));
+
+        //Если пользователя нет или пароль кривой то сюда не дойдем
+        UserDetails user = userDetailsService.loadUserByUsername(authRequest.email());
+
+        return new AuthResponse(jwtService.generateToken(user));
+    }
+}
\ No newline at end of file
Index: src/main/java/telran/project/gardenshop/dto/security/AuthResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/telran/project/gardenshop/dto/security/AuthResponse.java b/src/main/java/telran/project/gardenshop/dto/security/AuthResponse.java
new file mode 100644
--- /dev/null	(date 1753864809595)
+++ b/src/main/java/telran/project/gardenshop/dto/security/AuthResponse.java	(date 1753864809595)
@@ -0,0 +1,4 @@
+package telran.project.gardenshop.dto.security;
+
+public record AuthResponse(String token) {
+}
Index: src/main/java/telran/project/gardenshop/dto/security/AuthRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/telran/project/gardenshop/dto/security/AuthRequest.java b/src/main/java/telran/project/gardenshop/dto/security/AuthRequest.java
new file mode 100644
--- /dev/null	(date 1753864809645)
+++ b/src/main/java/telran/project/gardenshop/dto/security/AuthRequest.java	(date 1753864809645)
@@ -0,0 +1,4 @@
+package telran.project.gardenshop.dto.security;
+
+public record AuthRequest(String email, String password) {
+}
Index: src/main/java/telran/project/gardenshop/controller/AuthController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/telran/project/gardenshop/controller/AuthController.java b/src/main/java/telran/project/gardenshop/controller/AuthController.java
new file mode 100644
--- /dev/null	(date 1753865384304)
+++ b/src/main/java/telran/project/gardenshop/controller/AuthController.java	(date 1753865384304)
@@ -0,0 +1,42 @@
+package telran.project.gardenshop.controller;
+
+import lombok.RequiredArgsConstructor;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+import telran.project.gardenshop.dto.security.AuthRequest;
+import telran.project.gardenshop.dto.security.AuthResponse;
+import telran.project.gardenshop.service.security.AuthenticationService;
+
+@RestController
+@RequestMapping("/login")  //http://localhost:8080/login
+@RequiredArgsConstructor
+public class AuthController {
+
+    private final AuthenticationService authenticationService;
+
+    /*
+        AuthRequest ;
+        {
+            "email" : "alex@alex.com",
+            "password" : "12345"
+
+        }
+
+        AuthResponse :
+
+        {
+            "token" : "dfgfdgfgdfg.dfgdfgdgdfg.dfgdfgdfgd"
+        }
+
+        //POST, GET, PATCH,DELETE
+        //Authorization : "Bearer Token" : dfgfdgfgdfg.dfgdfgdgdfg.dfgdfgdfgd
+
+     */
+
+    @PostMapping
+    public AuthResponse login(@RequestBody AuthRequest authRequest) {
+        return authenticationService.authenticate(authRequest);
+    }
+}
\ No newline at end of file
